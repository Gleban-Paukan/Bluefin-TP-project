import time

import telebot
from telebot import types
import os
import sys
from requests import ReadTimeout
import config
import data_base_functions

bot = telebot.TeleBot(config.token())
bot.parse_mode = 'html'


@bot.message_handler(commands=['start'])
def welcome(message):
    user = data_base_functions.SQLiteUser(message.chat.id)
    bot.send_message(user.id, config.start_text(), disable_web_page_preview=True, reply_markup=config.start_markup())


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.text == "–ù–∞—à –∞–¥—Ä–µ—Å üìç":
        bot.send_location(message.chat.id, config.latitude, config.longitude)
        bot.send_message(message.chat.id,
                         f"""–ù–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n<b><a href="{config.address_link}">–ú–æ—Å–∫–≤–∞, 1-–π 
                         –ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 22—Å2</a></b>""",
                         disable_web_page_preview=True)
    elif message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üåù":
        user = data_base_functions.SQLiteUser(message.chat.id)
        if user.phone is None:
            bot.send_message(message.chat.id,
                             "–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É –Ω–∞—Å <b>–≤–ø–µ—Ä–≤—ã–µ</b> üò±.\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b> üëá.",
                             reply_markup=config.registration_markup())
        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton('üìí –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤', callback_data="order_list"))
            bot.send_message(message.chat.id,
                             f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>.\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +{user.phone}",
                             reply_markup=markup)


@bot.message_handler(content_types=['contact'])
def contact_received(message):
    contact = message.contact
    user = data_base_functions.SQLiteUser(message.chat.id)
    user.change_username(message.from_user.username)
    user.change_phone(message.contact.phone_number)
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è, <b>{contact.first_name}</b>!", reply_markup=config.start_markup())


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data == "order_list":
            user = data_base_functions.SQLiteUser(call.message.chat.id)
            if user.orders_count == 0:
                bot.send_message(call.message.chat.id,
                                 "–ü–æ–∫–∞ —É <b>–í–∞—Å</b> –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤. –° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º <b>–í–∞—à</b> –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ ü•°!")
            else:
                orders_data = user.get_all_orders()
                orders_id_set = set()
                markup = types.InlineKeyboardMarkup(row_width=1)
                for order in orders_data:
                    if order[0] not in orders_id_set:
                        orders_id_set.add(order[0])
                        markup.add(types.InlineKeyboardButton(order[5], callback_data=f'order_list_{order[0]}'))
                bot.send_message(call.message.chat.id, '–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:', reply_markup=markup)
        elif call.data == "order_processing":
            user = data_base_functions.SQLiteUser(call.message.chat.id)
            order_data = user.get_last_order()
            if order_data[0][4] == 'in progress':
                msg = bot.send_message(call.message.chat.id,
                                       "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n–ù–∞–º –Ω—É–∂–Ω—ã:\n<b>–£–ª–∏—Ü–∞, "
                                       "–Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂</b>.\n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "
                                       "–∫—É—Ä—å–µ—Ä—É.")
                bot.register_next_step_handler(msg, address_final)
            else:
                bot.send_message(call.message.chat.id,
                                 "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. "
                                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        elif 'order_in_progress_' in call.data:
            user = data_base_functions.SQLiteUser(call.data.split('_')[3])
            user.change_order_status(user.orders_count, 'cooking')
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–û—Ç–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É", callback_data=f'order_courier_search_{user.id}'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=call.message.text, reply_markup=markup)
            bot.send_message(user.id, '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è üç≥')
            time.sleep(1)
            bot.send_sticker(user.id, 'CAACAgIAAxkBAAEMJKNmSNZGl599H5bBKDzSFTldS3WrlwAC3wADMNSdERFtkOglJud9NQQ')
        elif 'order_courier_search_' in call.data:
            user = data_base_functions.SQLiteUser(call.data.split('_')[3])
            user.change_order_status(user.orders_count, 'delivery')
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f'order_close_{user.id}'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=call.message.text, reply_markup=markup)
            bot.send_message(user.id, '–ö—É—Ä—å–µ—Ä –≤–µ–∑—ë—Ç –≤–∞—à –∑–∞–∫–∞–∑ üèé')
            time.sleep(1)
            bot.send_sticker(user.id, 'CAACAgIAAxkBAAEMJLFmSOHRuALrWUrYfpz4Ca_qjIEadgACMgEAAqtXxAvSDaRAN23ITDUE')
        elif 'order_close_' in call.data:
            user = data_base_functions.SQLiteUser(call.data.split('_')[2])
            user.change_order_status(user.orders_count, 'closed')
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç ‚úÖ", callback_data=f'order_close_{user.id}'))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=call.message.text, reply_markup=markup)
            # bot.send_message(user.id, '')
            # time.sleep(1)
            # bot.send_sticker(user.id, 'CAACAgIAAxkBAAEMJLFmSOHRuALrWUrYfpz4Ca_qjIEadgACMgEAAqtXxAvSDaRAN23ITDUE')
        elif 'order_list_' in call.data:
            bot.send_message(call.message.chat.id,
                             config.configurate_order_list_text(call.message.chat.id,
                                                                f'{call.message.chat.id}_{call.data.split("_")[3]}'))


def address_final(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton("–ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É", callback_data=f'order_in_progress_{message.chat.id}'))
    bot.forward_message(config.restaurant_administration_chat_id, message.chat.id, message.message_id)
    bot.send_message(config.restaurant_administration_chat_id, config.configurate_order_text(message.chat.id,
                                                                                             message.text),
                     reply_markup=markup)
    bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑, –≤–æ—Ç-–≤–æ—Ç –Ω–∞—á–Ω—ë–º –≥–æ—Ç–æ–≤–∏—Ç—å ‚ù§Ô∏è")
    time.sleep(1)
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEMJg1mSjeLT5weUsjTgLdk5mwLe73vrgACoxUAAv0yWUgg57QVu83WOTUE')


if __name__ == '__main__':
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except (ConnectionError, ReadTimeout) as e:
        sys.stdout.flush()
        os.execv(sys.argv[0], sys.argv)
    else:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
